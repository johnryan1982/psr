#!/usr/bin/env node

var program = require('commander')
  , async = require('async')
  , fs = require('fs')
  , resolve = require('path').resolve
  , writeTo = require('../lib/util').writeTo
  , Jscat = require('..')
  , jscat
;

program
  .version(Jscat.version)
  .usage('[options] [dir|file|namespace ...]')
  .option('-h, --hook <path>', 'specify event hook source path')
  .option('-o, --out <path>', 'excute writeFile to path')
  .option('-n, --namespace <namespace>', 'add namespace')
  .option('-N, --no-src', 'excute with no hook including default hook')
  .option('-v, --verbose', 'verbose logging')
;

program.parse(process.argv);

// logger setting
var log = program.verbose
        ? console.error
        : function () {};

// resolve config source
if (!program.src) {
  jscat = new Jscat();
} else if (program.hook) {
  var path = resolve(program.hook);
  jscat = new Jscat(require(path));
} else {
  jscat = new Jscat(require('../lib/defaults'));
}

// remaining arg is the path of target files
var filePaths = program.args;
if (!filePaths.length) {
  console.log(program.helpInformation());
  program.emit('--help');
  process.exit(0);
}

// add namespace
var ns = program.namespace;
if (ns) jscat.namespace(ns);

// add outPath
if (program.out) {
  var outPath = resolve(program.out);
  jscat.outPath(outPath);
}

async.waterfall([
  // make sure file is not a directory
  function (next) {
    async.filter(filePaths, function (filePath, callback) {
      var stats = fs.lstatSync(filePath);
      return callback(stats.isFile());
    }, next.bind(null, null));// bind context null with error null
  }
  // fire "read" event
, function (paths, next) {
    async.map(paths, function (filePath, callback) {
      jscat.fireRead(filePath, callback);
    }, next);
  }
  // fire "each" event
, function (dataArray, next) {
    async.map(dataArray, function (data, callback) {
      jscat.fireEach(data, callback);
    }, next);
  }
  // fire "join" event
, function (dataArray, next) {
    jscat.fireJoin(dataArray, next);
  }
], function (err, result) {
  if (err) throw err;
  if (!program.out) {
    // if no output, log and exit
    console.log(result);
    process.exit(0);
  } else {
    // if output, excute writeFile
    var outPath = resolve(program.out);
    writeTo(outPath, result, function (err) {
      if (err) throw err;
      log(filePaths.join(',') + ' > ' + outPath);
    });
  }
});
